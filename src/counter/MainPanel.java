
package counter;

import java.util.ArrayList;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

/**
 *
 * @author grzes
 */
public class MainPanel extends javax.swing.JPanel
{
    MyTableModel tableModel = new MyTableModel();
    /**
     * Creates new form MainPanel
     */
    public MainPanel()
    {
        initComponents();
    }
    
    public WorkoutPlan getPlan()
    {
        throw new RuntimeException("TODO!");
    }
    
    public void setPlan(WorkoutPlan wp)
    {
        throw new RuntimeException("TODO!");
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        series = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        buttonAdd = new javax.swing.JButton();
        buttonRem = new javax.swing.JButton();

        jLabel1.setText("Number of series: ");

        series.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));

        table.setModel(tableModel);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(table);

        buttonAdd.setText("Add exercise");
        buttonAdd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonAddActionPerformed(evt);
            }
        });

        buttonRem.setText("Remove exercise");
        buttonRem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonRemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(series, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(buttonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(buttonRem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(series, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdd)
                    .addComponent(buttonRem))
                .addGap(87, 87, 87))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonRemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonRemActionPerformed
    {//GEN-HEADEREND:event_buttonRemActionPerformed
        int row = table.getSelectedRow();
        tableModel.removeExercise(row);
    }//GEN-LAST:event_buttonRemActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonAddActionPerformed
    {//GEN-HEADEREND:event_buttonAddActionPerformed
        tableModel.addExercise();
    }//GEN-LAST:event_buttonAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonRem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner series;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}

class MyTableModel implements TableModel
{
    int exercisesCount;
    ArrayList<ExercisePlan> exercises = new ArrayList<>();
    private final ArrayList<TableModelListener> tableModelListeners = new ArrayList<>();
    
    @Override
    public int getRowCount()
    {
        return exercisesCount;
    }

    @Override
    public int getColumnCount()
    {
        return 4;
    }

    @Override
    public String getColumnName(int i)
    {
        switch(i)
        {
            case 0:
                return "Exercise Nr";
            case 1:
                return "Repetitions";
            case 2:
                return "Rep. time (s)";
            case 3:
                return "Delay (s)";
            default:
                throw new RuntimeException("Internal error");
        }
    }

    @Override
    public Class<?> getColumnClass(int i)
    {
        if (i < 2) return Integer.class;
        else return Double.class;
    }

    @Override
    public boolean isCellEditable(int row, int col)
    {
        return col > 0;
    }

    @Override
    public Object getValueAt(int row, int col)
    {
        switch(col)
        {
            case 0:
                return row + 1;
            case 1:
                if (row < exercisesCount) return exercises.get(row).repetitions;
                else return null;
            case 2:
                if (row < exercisesCount) return exercises.get(row).time;
                else return null;
            case 3:
                if (row < exercisesCount) return exercises.get(row).delay;
                else return null;
            default:
                throw new RuntimeException("Internal error");
        }
    }

    @Override
    public void setValueAt(Object o, int row, int col)
    {
        switch(col)
        {
            case 1:
                maybeSetRepetitions(o, row);
                break;
            case 2:
                maybeSetTime(o, row);
                break;
            case 3:
                maybeSetDelay(o, row);
            default:
                throw new RuntimeException("Internal error");
        }
    }
    
    private int getInt(Object o)
    {
        Integer n;
        try {
            n = (Integer) o;
        } catch (ClassCastException ex) {
                throw new RuntimeException("Internal error");
        }
        return n;
    }
    
    private double getDouble(Object o)
    {
        Double d;
        try {
            d = (Double) o;
        } catch (ClassCastException ex) {
                throw new RuntimeException("Internal error");
        }
        return d;
    }
    
    private void maybeSetRepetitions(Object o, int row)
    {
        int n = getInt(o);
        if (n > 0)
        {
            exercises.get(row).repetitions = n;
            fireChange(new TableModelEvent(this, row, row, TableModelEvent.ALL_COLUMNS));
        }
    }

    private void maybeSetTime(Object o, int row)
    {
        double d = getDouble(o);
        if (d >= 0)
        {
            exercises.get(row).time = d;
            fireChange(new TableModelEvent(this, row, row, TableModelEvent.ALL_COLUMNS));
        }
    }

    private void maybeSetDelay(Object o, int row)
    {
        double d = getDouble(o);
        if (d >= 0)
        {
            exercises.get(row).delay = d;
            fireChange(new TableModelEvent(this, row, row, TableModelEvent.ALL_COLUMNS));
        }
    }
    
    public void addExercise()
    {
        int row = exercisesCount;
        exercisesCount++;
        exercises.add(new ExercisePlan(1, 0, 0));
        fireChange(new TableModelEvent(this, row, row,
            TableModelEvent.ALL_COLUMNS, TableModelEvent.INSERT));
    }
    
    public void removeExercise(int row)
    {
        exercises.remove(row);
        exercisesCount--;
        fireChange(new TableModelEvent(this, row, row,
            TableModelEvent.ALL_COLUMNS, TableModelEvent.DELETE));
    }
    
    @Override
    public void addTableModelListener(TableModelListener l)
    {
        tableModelListeners.add(l);
    }

    @Override
    public void removeTableModelListener(TableModelListener l)
    {
        tableModelListeners.remove(l);
    }
    
    private void fireChange(TableModelEvent ev)
    {
        for (TableModelListener tml: tableModelListeners)
            tml.tableChanged(ev);
    }
}