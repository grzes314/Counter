
package counter;

import java.util.ArrayList;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

/**
 *
 * @author grzes
 */
public class MainPanel extends javax.swing.JPanel
{
    MyTableModel tableModel = new MyTableModel();
    /**
     * Creates new form MainPanel
     */
    public MainPanel()
    {
        initComponents();
        tableModel.addTableModelListener(new TableModelListener() {
            @Override public void tableChanged(TableModelEvent tme) {
                updateTimeLabel();
            }
        });
    }
    
    public void setPlan(WorkoutPlan wp)
    {
        spinnerSeries.setValue(wp.series);
        spinnerBreak.setValue(wp.betweenSeriesTime);
        tableModel.clear();
        for (ExercisePlan ex: wp.exercises)
            tableModel.addExercise(ex);
    }
    
    public WorkoutPlan getPlan()
    {
        WorkoutPlan wp = new WorkoutPlan();
        wp.series = (Integer) spinnerSeries.getValue();
        wp.betweenSeriesTime = (Double) spinnerBreak.getValue();
        for (ExercisePlan ex: tableModel.exercises)
            wp.exercises.add(new ExercisePlan(ex));
        return wp;
    }
    
    void clear()
    {
        spinnerSeries.setValue(1);
        spinnerBreak.setValue(30);
        tableModel.clear();
    }
    
    private void updateTimeLabel()
    {
        double t = getPlan().getTotalTime();
        lblTotalTime.setText(secsToString(t));
    }
    
    private String secsToString(double t)
    {
        int m = (int)(t/60);
        int s = (int)(t - m*60);
        return m + "m " + s + "s";
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        spinnerSeries = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        buttonAdd = new javax.swing.JButton();
        buttonRem = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        spinnerBreak = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        lblTotalTime = new javax.swing.JLabel();

        jLabel1.setText("Number of series: ");

        spinnerSeries.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));
        spinnerSeries.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinnerSeriesStateChanged(evt);
            }
        });

        table.setModel(tableModel);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(table);

        buttonAdd.setText("Add exercise");
        buttonAdd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonAddActionPerformed(evt);
            }
        });

        buttonRem.setText("Remove exercise");
        buttonRem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonRemActionPerformed(evt);
            }
        });

        jLabel2.setText("Break between series:");

        spinnerBreak.setModel(new javax.swing.SpinnerNumberModel(30.0d, 0.0d, 1000.0d, 10.0d));
        spinnerBreak.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinnerBreakStateChanged(evt);
            }
        });

        jLabel3.setText("Workout time:");

        lblTotalTime.setText("          ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(buttonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(buttonRem, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addGap(38, 38, 38))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spinnerSeries)
                    .addComponent(spinnerBreak))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerSeries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spinnerBreak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdd)
                    .addComponent(buttonRem))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalTime))
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonRemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonRemActionPerformed
    {//GEN-HEADEREND:event_buttonRemActionPerformed
        int row = table.getSelectedRow();
        if (row >= 0)
            tableModel.removeExercise(row);
    }//GEN-LAST:event_buttonRemActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonAddActionPerformed
    {//GEN-HEADEREND:event_buttonAddActionPerformed
        tableModel.addExercise();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void spinnerSeriesStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinnerSeriesStateChanged
    {//GEN-HEADEREND:event_spinnerSeriesStateChanged
        updateTimeLabel();
    }//GEN-LAST:event_spinnerSeriesStateChanged

    private void spinnerBreakStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinnerBreakStateChanged
    {//GEN-HEADEREND:event_spinnerBreakStateChanged
        updateTimeLabel();
    }//GEN-LAST:event_spinnerBreakStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonRem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotalTime;
    private javax.swing.JSpinner spinnerBreak;
    private javax.swing.JSpinner spinnerSeries;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}

class MyTableModel implements TableModel
{
    int exercisesCount;
    ArrayList<ExercisePlan> exercises = new ArrayList<>();
    private final ArrayList<TableModelListener> tableModelListeners = new ArrayList<>();
    
    @Override
    public int getRowCount()
    {
        return exercisesCount;
    }

    @Override
    public int getColumnCount()
    {
        return 4;
    }

    @Override
    public String getColumnName(int i)
    {
        switch(i)
        {
            case 0:
                return "Exercise Nr";
            case 1:
                return "Repetitions";
            case 2:
                return "Rep. time (s)";
            case 3:
                return "Delay (s)";
            default:
                throw new RuntimeException("Internal error");
        }
    }

    @Override
    public Class<?> getColumnClass(int i)
    {
        if (i < 2) return Integer.class;
        else return Double.class;
    }

    @Override
    public boolean isCellEditable(int row, int col)
    {
        return col > 0;
    }

    @Override
    public Object getValueAt(int row, int col)
    {
        switch(col)
        {
            case 0:
                return row + 1;
            case 1:
                if (row < exercisesCount) return exercises.get(row).repetitions;
                else return null;
            case 2:
                if (row < exercisesCount) return exercises.get(row).time;
                else return null;
            case 3:
                if (row < exercisesCount) return exercises.get(row).delay;
                else return null;
            default:
                throw new RuntimeException("Internal error");
        }
    }

    @Override
    public void setValueAt(Object o, int row, int col)
    {
        switch(col)
        {
            case 1:
                maybeSetRepetitions(o, row);
                break;
            case 2:
                maybeSetTime(o, row);
                break;
            case 3:
                maybeSetDelay(o, row);
                break;
            default:
                throw new RuntimeException("Internal error");
        }
    }
    
    private int getInt(Object o)
    {
        Integer n;
        try {
            n = (Integer) o;
        } catch (ClassCastException ex) {
                throw new RuntimeException("Internal error");
        }
        return n;
    }
    
    private double getDouble(Object o)
    {
        Double d;
        try {
            d = (Double) o;
        } catch (ClassCastException ex) {
                throw new RuntimeException("Internal error");
        }
        return d;
    }
    
    private void maybeSetRepetitions(Object o, int row)
    {
        int n = getInt(o);
        if (n > 0)
        {
            exercises.get(row).repetitions = n;
            fireChange(new TableModelEvent(this, row, row, TableModelEvent.ALL_COLUMNS));
        }
    }

    private void maybeSetTime(Object o, int row)
    {
        double d = getDouble(o);
        if (d >= 0)
        {
            exercises.get(row).time = d;
            fireChange(new TableModelEvent(this, row, row, TableModelEvent.ALL_COLUMNS));
        }
    }

    private void maybeSetDelay(Object o, int row)
    {
        double d = getDouble(o);
        if (d >= 0)
        {
            exercises.get(row).delay = d;
            fireChange(new TableModelEvent(this, row, row, TableModelEvent.ALL_COLUMNS));
        }
    }
    
    public void addExercise()
    {
        int row = exercisesCount;
        exercisesCount++;
        exercises.add(new ExercisePlan(1, 0, 0));
        fireChange(new TableModelEvent(this, row, row,
            TableModelEvent.ALL_COLUMNS, TableModelEvent.INSERT));
    }
    

    void addExercise(ExercisePlan ex)
    {
        int row = exercisesCount;
        exercisesCount++;
        exercises.add(new ExercisePlan(ex));
        fireChange(new TableModelEvent(this, row, row,
            TableModelEvent.ALL_COLUMNS, TableModelEvent.INSERT));
    }
    
    public void removeExercise(int row)
    {
        exercises.remove(row);
        exercisesCount--;
        fireChange(new TableModelEvent(this, row, row,
            TableModelEvent.ALL_COLUMNS, TableModelEvent.DELETE));
    }

    void clear()
    {
        exercises.clear();
        exercisesCount = 0;
        fireChange(new TableModelEvent(this));
    }
    
    @Override
    public void addTableModelListener(TableModelListener l)
    {
        tableModelListeners.add(l);
    }

    @Override
    public void removeTableModelListener(TableModelListener l)
    {
        tableModelListeners.remove(l);
    }
    
    private void fireChange(TableModelEvent ev)
    {
        for (TableModelListener tml: tableModelListeners)
            tml.tableChanged(ev);
    }
}